#!/bin/bash
#
# Frontend for configure instance in gcp
#
# Copyright (c)
# All rights reserved.
#
# Original: username <nazeer_ahamed@gmail.com>, Aug 2018

# create an ext4 file system on the raw "stl-data-disk" disk you created in the other script (optional: see if you can optimize the file system for the GCP environment. Hint: RTFM (-;)
# mount the new disk at "/mnt/data"
# change the hostname to "stl-new-server"
# configure an NTP server: 10.10.10.1
# configure two name servers: 10.10.10.1 and 10.10.10.2
# apply the latest OS patches
# install git
# install nginx
# set the default HTML document in nginx to "/var/www/html/stl-index.html"
# configure automatic hourly backups of "/var/www/html/" to "/mnt/data/backups/nginx". Any backup files older than two weeks should be automatically deleted.


TOOLS_VERSION="1.0"

myname=$(basename $0)
mydir=$(dirname $0)
#echo $mydir
bindir=$mydir
contact='nazeer_ahamed@hotmail.com'
usage() {
    printf %s "\
usage: $myname [-h] [command] [arguments]
positional arguments:
  command               command name to run
optional arguments:
  -h, --help            show this help message and exit
"
echo "$myname [command] arguments"
. ${bindir}/configure-instance-help.sh
    exit 0
}

if [[ $# -lt 1 ]]; then
    usage
fi

while [[ $# -ge 1 ]]
do
  key="$1"
  #echo $key
  if [[ $key =~ ^(help|--help|-h|-help)$ ]]; then
    usage
  elif [[ $key =~ ^(upgradeos|install)$ ]]; then
    COMMAND=$key
  elif [[ $key =~ ^(-v|--version)$ ]]; then
    echo "${TOOLS_VERSION}"
    exit 0
  else
    echo "INFO: Command not found, kindly check help"
    exit 0
  fi
  shift
  while [[ $# -ge 1 ]]
  do
    sub_key=$1
    case $sub_key in
        -d|--d|-disk|--disk)
        DISK="$2"
        shift # past argument
        ;;
        -i|--i|-instance|--instance)
        INSTANCE="$2"
        shift # past argument
        ;;
	      help|--help|-h|-help)
	      usage
	      ;;
    esac
    shift # past argument or value
  done
  shift
done

#Varaiable declaration
CURRENT_USER=$(whoami)

function validate_disk_input(){
  if [[ -z ${DISK} ]]; then
      echo "Diskname is mandatory input"
      exit 0
  fi
}

function validate_instance_input(){
  if [[ -z ${INSTANCE} ]]; then
      echo "Instance name is mandatory input"
      exit 0
  fi
}

function print_inputs() {
  echo "Command:$COMMAND"
}

function execute_commands()
{
  if [[ $COMMAND == "mount" ]];then
     mount_filesystem
  elif [[ $COMMAND == "install" ]];then
     install
  else
    echo "Error:Command:${COMMAND} not found"
    exit 1
  fi
}

function create_disk(){
    echo "--------creating disk-------"
    validate_disk_input
    gcloud compute disks create my-disk-1 stl-data-disk --zone us-east1-a
    echo "name:${DISK}"

}

function Mount_disk(){


if [ -d stl-data-disk];
then
mount /mnt/data stl-data-disk
elif [ stl-data-disk to /mnt/data ]
umount /mnt/data
fi

}

function install(){
    echo "--------installing git, nginx-------"
    apt-get install -y git nginx
    if [[ $? -ne 0 ]]; then
      echo "Error: Installing git and nginx"
      exit 1
    fi
}


function_backup_copyToOtherDisk() {
    [ -e "$1" ] || return
    if [ -b /var/www/html/]; then
        ## backup disk found
        local mounted=0
        if [ ! -d /mnt/data/backups/nginx ]; then
            mount /mnt/data/backups/nginx && mounted=1
        fi
        if [ -d /mnt/data/backups/nginx ]; then
            echo "cp -v $1 /mnt/data/backups/nginx."
            cp -v "$1" /mnt/data/backups/nginx
            ls -la /mnt/data/backups/nginx
            sync
            df -h /mnt/data/backups/nginx
        fi
        [ $mounted = 1 ] && umount /mnt/data/backups/nginx
    fi
}


#delete backup after 1 week

function Delete_Backup(){
    echo "--------Delete backup-------"
    find /mnt/data/backups/*.nginx -mtime +7 type f -delete
    if [[ $? -ne 0 ]]; then
      echo "Error: Deleting back up"
      exit 1
    fi
}



#Main function
print_inputs
execute_commands
